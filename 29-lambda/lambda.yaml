---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'Pratice template from Irene Jia'

Resources:

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt lambdaFunction.Arn

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: 'ireneLambdaRole'

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Irene API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: ireneApiGateway

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        # Credentials: !GetAtt ApiGatewayIamRole.Arn
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref apiGateway
      RequestModels: 
        - $default: !Ref apiGatewayModel

  apiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref apiGateway
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: apiGatewayModel
        type: array
        items:
          type: object
          properties:
            uid:
              type: string
            Name:
              type: string
        required: ["uid","Name"]

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: irjdefault

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json

          def handler(event,context):
            client = boto3.client('dynamodb')
            input = json.loads(event["body"])
            output=client.put_item(
              TableName='ireneTestTable',
              Item={
                'uid': {'S':input['uid']},
                'Name':{'S':input['Name']}
              })
            response = {
              'isBase64Encoded': False,
              'statusCode': 200,
              'headers': {},
              'multiValueHeaders': {},
              'body': json.dumps(output)
            }
            return response
      Description: Example Lambda function
      FunctionName: ireneGateway
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.8

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: ireneGateway
      RestApiId: !Ref apiGateway

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ireneTestTable
      AttributeDefinitions:
        - AttributeName: "uid"
          AttributeType: "S"
        - AttributeName: "Name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "uid"
          KeyType: HASH
        - AttributeName: "Name"
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5